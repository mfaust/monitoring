
require 'yaml'

config_file = File.dirname(File.expand_path(__FILE__)) + '/../config/jenkins.yml'

config = YAML::load(File.open(config_file))

config.inspect




SUCCESS = 'Successful'
FAILED = 'Failed'

def api_functions
  return {
    'Jenkins_pc-ci'  => lambda { |build_id| get_jenkins_build_health build_id},
    'Jenkins_cm7-ci' => lambda { |build_id| get_jenkins_build_health build_id}
  }
end

def get_url(url, auth = nil)

  puts " url : " + url.to_s

  return ""

  uri = URI.parse(url)
  http = Net::HTTP.new(uri.host, uri.port)
  if uri.scheme == 'https'
    http.use_ssl = true
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end
  request = Net::HTTP::Get.new(uri.request_uri)

  if auth != nil then
    request.basic_auth *auth
  end

  response = http.request(request)
  return JSON.parse(response.body)
end

def calculate_health(successful_count, count)
  return (successful_count / count.to_f * 100).round
end

def get_build_health(build)

  puts " build : " + build.to_s

  id     = build['id']
  server = build['server']

  puts " id    : " + id.to_s
  puts " server: " + server.to_s

  api_functions[ server ].call( id )
end

def get_jenkins_build_health(build_id)

  url = "#{Builds::BUILD_CONFIG['jenkinsBaseUrl']}/job/#{build_id}/api/json?tree=builds[status,timestamp,id,result,duration,url,fullDisplayName]"

  puts " url : " + url.to_s

#   build_info = get_url URI.encode(url)
#   builds = build_info['builds']
#   builds_with_status = builds.select { |build| !build['result'].nil? }
#   successful_count = builds_with_status.count { |build| build['result'] == 'SUCCESS' }
#   latest_build = builds_with_status.first
#   return {
#     name: latest_build['fullDisplayName'],
#     status: latest_build['result'] == 'SUCCESS' ? SUCCESS : FAILED,
#     duration: latest_build['duration'] / 1000,
#     link: latest_build['url'],
#     health: calculate_health(successful_count, builds_with_status.count),
#     time: latest_build['timestamp']
#   }

end

SCHEDULER.every '5s' do
#   Builds::BUILD_LIST.each do |build|
#
#     #puts " build : " + build.to_s
#
#     build = get_build_health(build);
#
# #    send_event(build['id'], get_build_health(build))
#   end






  Builds::BUILD_LIST.each do |jenkins|

    puts " jenkins : " + jenkins.to_s

    jenkins.each do |server|


      puts "   server : " + server.to_s
      puts "   build  : " + server.to_s

    end

    #puts jenkins['server'].to_s

#    build = get_build_health(jenkins);

#    send_event(build['id'], get_build_health(build))
  end

end
