#!/bin/bash
#
# NRPE Check for G+J LDAP
#

# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="1.3.1"
VDATE="04.01.2016"

# ----------------------------------------------------------------------------------------

[ -f /usr/local/share/nrpe_defaults.sh ] && . /usr/local/share/nrpe_defaults.sh

FILE=
WARN=10
CRIT=0

# ----------------------------------------------------------------------------------------

LDAPSEARCH=$(which ldapsearch)

if [ -z ${LDAPSEARCH} ]
then
  echo "UNKNOWN - We need 'ldapsearch'! please run puppet agent again"

  exit ${STATE_UNKNOW}
fi

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "NRPE-Check to Check LDAP Connections"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" \
          "$SCRIPTNAME [-h] [-v] [-f] [-w] [-c critical]"

  printf  "$help_format_desc" "" \
          "-h" ": Show this help"

  printf  "$help_format_desc" "" \
          "-v" ": Prints out the Version"


  printf  "$help_format_desc" "" \
          "-f" ": config-File [/usr/local/etc/ldap.cfg]"

  printf  "$help_format_desc" "" \
          "-w" ": Warn [10]"

  printf  "$help_format_desc" "" \
          "-c" ": Critical [0]"
}

# ----------------------------------------------------------------------------------------

run() {

  . ${FILE}

  [ -z "${LDAP_USER}" ] && {
    echo "Configuration error: parameter 'LDAP_USER' missing"
    exit ${STATE_UNKNOWN}
  }

  [ -z "${LDAP_PASS}" ] && {
    echo "Configuration error: parameter 'LDAP_PASS' missing"
    exit ${STATE_UNKNOWN}
  }

  [ -z "${LDAP_SERVER}" ] && {
    echo "Configuration error: parameter 'LDAP_SERVER' missing"
    exit ${STATE_UNKNOWN}
  }

  [ -z "${LDAP_FILTER}" ] && {
    echo "Configuration error: parameter 'LDAP_FILTER' missing"
    exit ${STATE_UNKNOWN}
  }

  [ ! -z "${WARN}" ] && {
    WARN=${LDAP_WARN}
  }

  [ ! -z "${CRIT}" ] && {
    CRIT=${LDAP_CRIT}
  }


  ${LDAPSEARCH} -H ldaps://${LDAP_SERVER} -x -D "CN=${LDAP_USER},OU=service,OU=guj,DC=global,DC=intra,DC=guj,DC=com" -b DC=global,DC=intra,DC=guj,DC=com -s sub -w "${LDAP_PASS}" 'CN=xgujqatrack1' > /dev/null

  if [ $? -gt 0 ]
  then
    echo "CRITICAL - LDAP-Server ${LDAP_SERVER} not responding"
    exit ${STATE_CRITICAL}
  else
    run_time_before=$(date +%s)

    count=$(${LDAPSEARCH} -l 3 -H ldaps://${LDAP_SERVER} -x -D "CN=${LDAP_USER},OU=service,OU=guj,DC=global,DC=intra,DC=guj,DC=com" -b DC=global,DC=intra,DC=guj,DC=com -s sub -w "${LDAP_PASS}" "${LDAP_FILTER}" | grep "uid: " | wc -l)

    result=$?

    if [ ${count} -eq 0 ]
    then
      status="CRITICAL"
      result=${STATE_CRITICAL}
    elif ( [ ${count} -gt ${WARN} ] || [ ${count} -eq ${WARN} ] )
    then
      status="OK"
      result=${STATE_OK}
    elif ( [ ${count} -gt ${CRIT} ] || [ ${count} -lt ${WARN} ] )
    then
      status="WARN"
      result=${STATE_WARNING}
    elif ( [ ${count} -eq ${CRIT} ] || [ ${count} -lt ${CRIT} ] )
    then
      status="CRITICAL"
      result=${STATE_CRITICAL}
    fi

    run_time_after=$(date +%s)

    echo "${status} - LDAP Query give us ${count} users ($((run_time_after - $run_time_before)) sec.)"
    exit ${result}
  fi
}

# ----------------------------------------------------------------------------------------

# Parse parameters
while [ $# -gt 0 ]
do
  case "$1" in
    -h|--help) hift
      usage;
      exit 0
      ;;
    -v|--version) shift
      version;
      exit 0
      ;;
    -f|--file) shift
      FILE="${1}"
      ;;
    -w|--warn) shift
      WARN=${1}
      ;;
    -c|--critical) shift
      CRIT=${1}
      ;;
    *)  echo "Unknown argument: $1"
      exit ${STATE_UNKNOWN}
      ;;
  esac
shift
done

# Check that required argument (metric) was specified
[ -z "${FILE}" ] && {
  echo "Usage error: parameter 'file' missing"
  exit ${STATE_UNKNOWN}
}

#----------------------------------------------------------------------------------------

run

# EOF
