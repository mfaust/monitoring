#!/bin/bash
#
# maintainer         Coremedia
# maintainer_email   bodo.schulz@coremedia.com
# license            Copyright (C) 2016, CoreMedia AG proprietary License, all rights reserved.
# description        icinga Check for Memory Caches
# version            2.0.2
# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="2.0.4"
VDATE="07.06.2016"

# ----------------------------------------------------------------------------------------

defaults="/usr/lib/monitoring-plugins/utils.sh"

[ -f ${defaults} ] && {
  . ${defaults}
} || {
  STATE_OK=0
  STATE_WARNING=1
  STATE_CRITICAL=2
  STATE_UNKNOWN=3
  STATE_DEPENDENT=4
}

TMP_DIR=
PLUGIN_BASE="/usr/lib/monitoring-plugins"
CACHE_BASE="/var/cache/monitoring"

[ -f /etc/env.vars ] && . /etc/env.vars

JQ=$(which jq)

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "NRPE-Check to Check Coremedia Feeder Status"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" \
          "$SCRIPTNAME [-h|--help] [-v|--version] [-H|--host $Hostname] [-p|--port $Port] [-m|--memory $Memory]"

  printf  "$help_format_desc"    ""  "-h | --help"     ": Show this help"
  printf  "$help_format_desc"    ""  "-v | --version"  ": Prints out the Version"
  printf  "$help_format_desc"    ""  "-H | --host"     ": Host with running Application"
  printf  "$help_format_desc"    ""  "-P | --port"     ": JMX Port for the running Application"
  printf  "$help_format_desc"    ""  "-m | --memory"   ": Memorytype [heap-mem,perm-mem,uapi-cache,blob-cache]"
}

# ----------------------------------------------------------------------------------------

round() {
  echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}

k2h() {
  SLIST=",bytes,KB,MB,GB,TB,PB,EB,ZB,YB"
  POWER=1
  VAL=$( echo "scale=2; $1 * 1024 / 1" | bc)
  VINT=$( echo $VAL / 1024 | bc )
  while [ ! $VINT = "0" ]
  do
    let POWER=POWER+1
    VAL=$( echo "scale=2; $VAL / 1024" | bc)
    VINT=$( echo $VAL / 1024 | bc )
  done
  echo $VAL$( echo $SLIST | cut -f$POWER -d, )
}


heapMem() {

  file="${TMP_DIR}/Memory.result"

  if [ -f ${file} ]
  then
    [ $(stat -c %s ${file}) -eq 0 ] && { sleep 1s; }

    max=$(${JQ} --raw-output '.value.HeapMemoryUsage.max' ${file})
    use=$(${JQ} --raw-output '.value.HeapMemoryUsage.used' ${file})
    com=$(${JQ} --raw-output '.value.HeapMemoryUsage.committed' ${file})

    # in real memory
    #  64 MiB  = 67108864
    # 128 MiB  = 134217728
    # 256 MiB  = 268435456
    # 512 MiB  = 536870912
#    max_warn=134217728    # max - 128 MB
#    max_crit=67108864     # max -  64 MB
#    diff=$(echo "${max} - ${use}" | bc)

    # in percent
    percent=$(( 100 * use / com ))
    max_warn="85" # percent
    max_crit="92"

    #    x <= 75        = OKAY
    #    x > 75 && < 80 = WARN
    #    x >= 80        = CRIT

    if ( [ ${percent} -eq ${max_warn} ] || [ ${percent} -lt ${max_warn} ] )
    then
      status="OK"
      result=${STATE_OK}
    elif ( [ ${percent} -gt ${max_warn} ] && [ ${percent} -lt ${max_crit} ] )
    then
      status="WARN"
      result=${STATE_WARNING}
    else
      status="CRITICAL"
      result=${STATE_CRITICAL}
    fi

    mem_max=$(k2h $(echo -e "${max}"))
    mem_use=$(k2h $(echo -e "${use}"))
    mem_com=$(k2h $(echo -e "${com}"))

    echo "${status} - Heap Memory: ${percent}% used (Commited: ${mem_com} - Used: ${mem_use} - Max: ${mem_max})"
    exit ${result}
  else
    echo "UNKNOWN - Heap Memory: no check result found"
    exit ${STATE_UNKNOWN}
  fi
}

permMem() {

  file="${TMP_DIR}/Memory.result"

  if [ -f ${file} ]
  then
    [ $(stat -c %s ${file}) -eq 0 ] && { sleep 1s; }

    max=$(${JQ} --raw-output '.value.NonHeapMemoryUsage.max' ${file})
    use=$(${JQ} --raw-output '.value.NonHeapMemoryUsage.used' ${file})
    com=$(${JQ} --raw-output '.value.NonHeapMemoryUsage.committed' ${file})

    # in real memory
    #  64 MiB  = 67108864
    # 128 MiB  = 134217728
    # 256 MiB  = 268435456
    # 512 MiB  = 536870912
#    max_warn=134217728    # max - 128 MB
#    max_crit=67108864     # max -  64 MB
#    diff=$(echo "${max} - ${use}" | bc)

    # in percent
    percent=$(( 100 * use / com ))
    max_warn="85" # percent
    max_crit="92"

    #    x <= 75        = OKAY
    #    x > 75 && < 80 = WARN
    #    x >= 80        = CRIT

    if ( [ ${percent} -eq ${max_warn} ] || [ ${percent} -lt ${max_warn} ] )
    then
      status="OK"
      result=${STATE_OK}
    elif ( [ ${percent} -gt ${max_warn} ] && [ ${percent} -lt ${max_crit} ] )
    then
      status="WARN"
      result=${STATE_WARNING}
    else
      status="CRITICAL"
      result=${STATE_CRITICAL}
    fi

    mem_max=$(k2h $(echo -e "${max}"))
    mem_use=$(k2h $(echo -e "${use}"))
    mem_com=$(k2h $(echo -e "${com}"))

    echo "${status} - Perm Memory: ${percent}% used (Commited: ${mem_com} - Used: ${mem_use} - Max: ${mem_max})"
    exit ${result}
  else
    echo "UNKNOWN - Perm Memory: no check result found"
    exit ${STATE_UNKNOWN}
  fi
}

uapiCache() {

  local search="CM_CapConnection"

  if [ -f ${CACHE_BASE}/${HOST}/cm-services ]
  then

    part=$(grep ${PORT} ${CACHE_BASE}/${HOST}/cm-services | grep ${search} | sed -r "s/.*${search}(\S+).*/\1/" | tr -d '"' )

    file="${TMP_DIR}/${search}${part}.result"
  else
    echo "UNKNOWN - UAPI Cache: no Coremedia Services environment found"
    exit ${STATE_UNKNOWN}
  fi

  if [ -f ${file} ]
  then

    [ $(stat -c %s ${file}) -eq 0 ] && { sleep 1s; }

    cacheSize=$(${JQ} --raw-output '.value.HeapCacheSize' ${file})
    cacheLevel=$(${JQ} --raw-output '.value.HeapCacheLevel' ${file})

    # in real memory
    #  64 MiB  = 67108864
    # 128 MiB  = 134217728
    # 256 MiB  = 268435456
    # 512 MiB  = 536870912
#    max_warn=134217728    # max - 128 MB
#    max_crit=67108864     # max -  64 MB
#    diff=$(echo "${max} - ${use}" | bc)

    # in percent
    percent=$(( 100 * cacheLevel / cacheSize ))
    max_warn="85" # percent
    max_crit="92"

    if ( [ ${percent} -eq ${max_warn} ] || [ ${percent} -lt ${max_warn} ] )
    then
      status="OK"
      result=${STATE_OK}
    elif ( [ ${percent} -gt ${max_warn} ] && [ ${percent} -lt ${max_crit} ] )
    then
      status="WARN"
      result=${STATE_WARNING}
    else
      status="CRITICAL"
      result=${STATE_CRITICAL}
    fi

    mem_max=$(k2h $(echo -e "${cacheSize}"))
    mem_use=$(k2h $(echo -e "${cacheLevel}"))

    echo "${status} - UAPI Cache: ${percent}% used (Used: ${mem_use} - Max: ${mem_max})"
    exit ${result}
  else
    echo "UNKNOWN - UAPI Cache: no check result found"
    exit ${STATE_UNKNOWN}
  fi
}

blobCache() {

  local search="CM_CapConnection"

  if [ -f ${CACHE_BASE}/${HOST}/cm-services ]
  then

    part=$(grep ${PORT} ${CACHE_BASE}/${HOST}/cm-services | grep ${search} | sed -r "s/.*${search}(\S+).*/\1/" | tr -d '"' )

    file="${TMP_DIR}/${search}${part}.result"
  else
    echo "UNKNOWN - Blob Cache: no Coremedia Services environment found"
    exit ${STATE_UNKNOWN}
  fi

  if [ -f ${file} ]
  then
    [ $(stat -c %s ${file}) -eq 0 ] && { sleep 1s; }

    cacheSize=$(${JQ} --raw-output '.value.BlobCacheSize' ${file})
    cacheLevel=$(${JQ} --raw-output '.value.BlobCacheLevel' ${file})

    # in real memory
    #  64 MiB  = 67108864
    # 128 MiB  = 134217728
    # 256 MiB  = 268435456
    # 512 MiB  = 536870912
#    max_warn=134217728    # max - 128 MB
#    max_crit=67108864     # max -  64 MB
#    diff=$(echo "${max} - ${use}" | bc)

    # in percent
    percent=$(( 100 * cacheLevel / cacheSize ))
    max_warn="85" # percent
    max_crit="92"

    if ( [ ${percent} -eq ${max_warn} ] || [ ${percent} -lt ${max_warn} ] )
    then
      status="OK"
      result=${STATE_OK}
    elif ( [ ${percent} -gt ${max_warn} ] && [ ${percent} -lt ${max_crit} ] )
    then
      status="WARN"
      result=${STATE_WARNING}
    else
      status="CRITICAL"
      result=${STATE_CRITICAL}
    fi

    mem_max=$(k2h $(echo -e "${cacheSize}"))
    mem_use=$(k2h $(echo -e "${cacheLevel}"))

    echo "${status} - Blob Cache: ${percent}% used (Used: ${mem_use} - Max: ${mem_max})"
    exit ${result}
  else
    echo "UNKNOWN - Blob Cache: no check result found"
    exit ${STATE_UNKNOWN}
  fi
}


run() {

  TMP_DIR=${CACHE_BASE}/${HOST}/${PORT}

  case ${MEMORY} in
    heap-mem)     heapMem      ;;
    perm-mem)     permMem      ;;
    uapi-cache)   uapiCache    ;;
    blob-cache)   blobCache    ;;
    *)            echo "UNKNOWN - unknown Memory Check '${MEMORY}'"; exit ${result} ;;
  esac
}

# ----------------------------------------------------------------------------------------

# Parse parameters
while [ $# -gt 0 ]
do
  case "${1}" in
    -h|--help) shift
      usage;
      exit 0
      ;;
    -v|--version) shift
      version;
      exit 0
      ;;
    -H|--host)
      shift
      HOST="${1}"
      SERVICES="${CACHE_BASE}/${HOST}/cm-services"
      ;;
    -p|--port)
      shift
      PORT="${1}"
      ;;
    -m|--memory)
      shift
      MEMORY="${1}"
      ;;
    *)
      echo "Unknown argument: '${1}'"
      exit $STATE_UNKNOWN
      ;;
  esac
shift
done

#----------------------------------------------------------------------------------------
[ -z "${HOST}" ] && {
  echo "Usage error: parameter --host missing"
  usage
  exit ${STATE_UNKNOWN}
}

[ -z "${PORT}" ] && {
  echo "Usage error: parameter --port missing"
  usage
  exit ${STATE_UNKNOWN}
}

[ -z "${MEMORY}" ] && {
  echo "Usage error: parameter --memory missing"
  usage
  exit ${STATE_UNKNOWN}
}

run

# EOF
