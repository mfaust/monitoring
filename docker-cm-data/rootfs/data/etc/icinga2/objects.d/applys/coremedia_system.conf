
/**
  *    Zombie Procs
  */
apply Service "nrpe-zombie-procs" to Host {
  import "generic-service"
  display_name = "NRPE - zombie procs"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_zombie_procs"
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 20s
  enable_notifications = false
}

/**
  *    current load
  */
apply Service "nrpe-current-load" to Host {
  import "generic-service"
  display_name = "NRPE - current load"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_load"
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 20s
  enable_notifications = false
}

/**
  *    available disk space
  */
apply Service "nrpe-disk" to Host {
  import "generic-service"
  display_name = "NRPE - Disk Space /"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_disk"
    "nrpe_arguments" = [
      "10%",
      "5%",
      "/",
    ]
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 20s
  enable_notifications = false
}

/**
  *  HTTP check
  */
apply Service "" for ( app => config in host.vars.coremedia ) {

  import "generic-service"
  vars += config
  display_name = "CoreMedia - Web Proxy (HTTP)"
  notes        = "check against a HTTP Landing Page"
  notes_url    = "/doc/http.html"

  check_command = "http"
  assign where app == "http_proxy"

  vars = {
    "http_port" = 80
    "http_uri" = "/"
    "http_string" = "CoreMedia AG"
    "http_onredirect" = "follow"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *  HTTPS check
  */
apply Service "" for ( app => config in host.vars.coremedia ) {

  import "generic-service"
  vars += config
  display_name = "CoreMedia - Web Proxy (HTTPs)"
  notes        = "check against a HTTPs Landing Page"
  notes_url    = "/doc/http.html"

  check_command = "http"
  assign where app == "https_proxy"

  vars = {
    "http_port" = 443
    "http_uri" = "/"
    "http_string" = "CoreMedia"
    "http_ssl" = true
    "http_onredirect"= "follow"
    "http_ssl_force_tlsv1_2_or_higher" = true
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *  SSL certifacte check
  */
apply Service "cert-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"
  vars += config
  display_name = "CoreMedia - Certificate (HTTPs)"
  notes        = "check ssl certificate"
  notes_url    = "/doc/http-certificate.html"

  check_command = "ssl"
  assign where app == "https_proxy"

  vars = {
    "ssl_address" = host.address
    "ssl_port" = "443"
    "ssl_cert_valid_days_warn" = "240"
    "ssl_cert_valid_days_critical" = "120"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *  generic HTTP check for all vhosts in vars.http_vhost
  */
apply Service "HTTP: " for (http_vhost => config in host.vars.http_vhost) {
  import "generic-service"
  check_command = "http"

  vars = {
    "http_vhost" = http_vhost
  }

  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 2
  enable_notifications = true

  assign where host.vars.http_vhost
}

/**
  *  generic HTTPS check for all vhosts in vars.https_vhost
  */
apply Service "HTTPS: " for (https_vhost => config in host.vars.https_vhost) {
  import "generic-service"
  check_command = "http"

  vars = {
    "http_vhost" = https_vhost
    "http_sni" = true
    "http_ssl" = true
    "notify" = "true"
  }

  max_check_attempts = 5
  check_interval = 3m
  retry_interval = 2
  enable_notifications = true

  assign where host.vars.https_vhost
}

/**
  *  generic SSL CCERT check for all vhosts in vars.https_vhost
  */
apply Service "SSL CERT: " for (https_vhost => config in host.vars.https_vhost) {
  import "generic-service"
  check_command = "http"

  vars = {
    "http_vhost" = https_vhost
    "http_certificate" = "15"
    "http_port" = "443"
    "http_sni" = true
    "http_ssl" = true
    "notify" = "true"
  }

  max_check_attempts = 1
  check_interval = 4h
  retry_interval = 2
  enable_notifications = true

  assign where host.vars.https_vhost
}






/**
  *  Check IOR on Applications
  */
apply Service "IOR-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"
  vars += config
  display_name = "CoreMedia - IOR - " + app
  notes        = "check against the IOR URL"
  notes_url    = "/doc/ior.html"

  check_command = "http"
  assign where config.ior == true

  vars = {
    "http_port" = config.port_http
    "http_uri" = "/coremedia/ior"
    "http_string" = "IOR:"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}

/**
  *
  */
apply Service "CAEFeeder-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"
  vars += config
  display_name = "CoreMedia - CAEFeeder - " + config.feeder
  notes        = "CAE Feeder"
  notes_url    = "/doc/cae-feeder.html"

  check_command = "coremedia_feeder"

  assign where app == "caefeeder-live" || app == "caefeeder-preview"

  vars = {
    "host"   = host.address
    "feeder" = config.feeder
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *
  */
apply Service "ContentFeeder-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - Content Feeder"
  notes        = "Content Feeder"
  notes_url    = "/doc/content-feeder.html"

  check_command = "coremedia_feeder"

  assign where app == "content-feeder"

  vars = {
    "host"   = host.address
    "feeder" = config.feeder
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}

/**
  *
  */
apply Service "UAPICache-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - UAPI Cache - " + app
  notes        = "UAPI Cache"
  notes_url    = "/doc/uapi-cache.html"

  check_command = "coremedia_cache"

  assign where config.uapi_cache == true

  vars = {
    "host"   = host.address
    "application" = app
    "cache" = "uapi-cache"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}

/**
  *
  */
apply Service "BlobCache-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - Blob Cache - " + app
  notes        = "BLOB Cache"
  notes_url    = "/doc/blob-cache.html"

  check_command = "coremedia_cache"

  assign where config.blob_cache == true

  vars = {
    "host"   = host.address
    "application" = app
    "cache" = "blob-cache"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}

/**
  *
  */
apply Service "HeapMemory-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name  = "CoreMedia - Heap Memory - " + app
  notes         = "Tomcat Heap Memory"
  notes_url     = "/doc/heap-memory.html"

  check_command = "coremedia_memory"

  assign where config.heap_cache == true

  vars = {
    "host"        = host.address
    "application" = app
    "memory"      = "heap-mem"
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}


/**
  *
  */
apply Service "License-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - License - " + app
  notes        = "CoreMedia Content Server License"
  notes_url    = "/doc/license.html"

  check_command = "coremedia_license"

  assign where config.license == true

  vars = {
    "host"   = host.address
    "application" = app
  }

  max_check_attempts = 2
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *
  */
apply Service "CapConnection-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - Cap Connection - " + app
  notes        = "CAP Connection"
  notes_url    = "/doc/cap-connection.html"

  check_command = "coremedia_capconnection"

  assign where config.cap_connection == true

  vars = {
    "host"   = host.address
    "application" = app
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}

/**
  *
  */
apply Service "Runlevel-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - Runlevel - " + app
  notes        = "Runlevel Status"
  notes_url    = "/doc/runlevel.html"

  check_command = "coremedia_runlevel"

  assign where config.runlevel == true

  vars = {
    "host"   = host.address
    "application" = app
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = false
}

/**
  *
  */
apply Service "SequenceNumber-" for ( app => config in host.vars.coremedia ) {

  import "generic-service"

  vars += config

  display_name = "CoreMedia - Sequence Numbers - " + app
  notes        = "Sequence Numbers between MLS and RLS"
  notes_url    = "/doc/sequence-numbers.html"

  check_command = "coremedia_sequencenumbers"

  assign where config.sequencenumbers == true

  vars = {
    "rls"   = host.address
  }

  max_check_attempts = 3
  check_interval = 45s
  retry_interval = 20s
  enable_notifications = true
}
