---
version: '2.0'

networks:
  mon:

volumes:
  database:
    driver: local
  redis:
    driver: local
  carbon:
    driver: local
  icinga:
    driver: local

services:

  data:
    build: ../../docker-cm-data
    container_name: 01-data
    volumes:
      - /share:/share

  certificate:
    image: bodsch/omgwtfssl
    container_name: 01-certificate
    environment:
      SILENT: 'true'
      SSL_SUBJECT: localhost
    volumes:
      - ./certs:/certs
    depends_on:
      - data

  beanstalkd:
    restart: always
    image: bodsch/docker-beanstalkd:1710.1
    container_name: beanstalkd
    hostname: beanstalkd
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mon

  database:
    restart: always
    image: bodsch/docker-mysql:1711.1
    container_name: database
    hostname: database
    ports:
      - 3306:3306
    environment:
      MYSQL_SYSTEM_USER: root
      MYSQL_ROOT_PASS: database.pass
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - database:/srv
    networks:
      - mon

  jolokia:
    restart: always
    build: ../../docker-cm-jolokia
    container_name: jolokia
    hostname: jolokia
    ports:
      - 8080:8080
      - 8088:8088
    depends_on:
      - data
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mon
    extra_hosts:
      osmc.local: 192.168.122.60

  memcached:
    restart: always
    image: bodsch/docker-memcached:1710.1
    container_name: memcached
    hostname: memcached
    volumes:
      - /etc/localtime:/etc/localtime:ro
    command: "-l 0.0.0.0 -m 8 -u memcached"
    networks:
      - mon

  redis:
    restart: always
    image: bodsch/docker-redis:1710.1
    container_name: redis
    hostname: redis
    ports:
      - 6379:6379
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - redis:/var/lib/redis
    networks:
      - mon

  nginx:
    restart: always
    image: bodsch/docker-nginx:1711.1
    container_name: nginx
    hostname: nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - data
      - certificate
      - grafana
      - icingaweb2
      - cm-rest-service
      - markdown-service
    links:
      - grafana
      - icingaweb2
      - cm-rest-service
      - markdown-service
    volumes:
      - ./certs:/etc/nginx/secure/
      - /etc/localtime:/etc/localtime:ro
      - /share/www/entry-page:/var/www/entry-page
      - /share/etc/nginx/external/https.conf:/etc/nginx/external/https.conf
      - /share/etc/nginx/sites-enabled/01-default.conf:/etc/nginx/sites-enabled/01-default.conf
      - /share/etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /share/etc/nginx/modules.d/00-restrictions.conf:/etc/nginx/modules.d/00-restrictions.conf
      - /share/etc/nginx/modules.d/01-proxy-rest-service.conf:/etc/nginx/modules.d/01-proxy-rest-service.conf:ro
      - /share/etc/nginx/modules.d/01-proxy-grafana.conf:/etc/nginx/modules.d/01-proxy-grafana.conf
      - /share/etc/nginx/modules.d/01-proxy-graphite.conf:/etc/nginx/modules.d/01-proxy-graphite.conf
      - /share/etc/nginx/modules.d/01-proxy-icingaweb2.conf:/etc/nginx/modules.d/01-proxy-icingaweb2.conf
      - /share/etc/nginx/modules.d/01-proxy-dashing-icinga2.conf:/etc/nginx/modules.d/01-proxy-dashing-icinga2.conf
      - /share/etc/nginx/modules.d/01-proxy-markdown-service.conf:/etc/nginx/modules.d/01-proxy-markdown-service.conf
    networks:
      - mon

  carbon:
    restart: always
    image: bodsch/docker-go-carbon:1710.1
    container_name: carbon
    hostname: carbon
    depends_on:
      - data
    ports:
      - 2003:2003
      - 2003:2003/udp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/log/:/var/tmp/docker-log
      - carbon:/srv
    networks:
      - mon

  graphite:
    restart: always
    image: bodsch/docker-graphite:1.1.0-r1
    container_name: graphite
    hostname: graphite
    environment:
      # THIS TURN OFF THE INTERNAL CARBON!
      # USE THIS ONLY WITH AN OTHER CARBON-WRITER (e.g. bodsch/docker-go-carbon)
      USE_EXTERNAL_CARBON: 'true'
    depends_on:
      - data
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - carbon:/srv
    networks:
      - mon

  grafana:
    restart: always
    image: bodsch/docker-grafana:4.6.2-r2
    container_name: grafana
    hostname: grafana
    environment:
      URL_PATH: /grafana/
      ORGANISATION: CoreMedia
      DATABASE_TYPE: mysql
      MYSQL_HOST: database
      MYSQL_ROOT_PASS: database.pass
      GRAPHITE_HOST: graphite
      # WE USE AN SEPERATE CARBON SERVICE
      # IF NOT, THEN SET THEN TO $GRAPHITE_HOST
      # (see above in this configuration part!)
      CARBON_HOST: carbon
      MEMCACHE_HOST: memcached
      LDAP: '{
        "server": "${LDAP_SERVER}",
        "port": "${LDAP_PORT}",
        "bind_dn": "${LDAP_BIND_DN}",
        "bind_password": "${LDAP_BIND_PASSWORD}",
        "base_dn": "${LDAP_BASE_DN}",
        "group_dn": "${LDAP_GROUP_DN}",
        "search_filter": "${LDAP_SEARCH_FILTER}"
      }'
    depends_on:
      - data
      - database
      - memcached
    links:
      - database
      - memcached
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /share/opt/grafana/dashboards:/opt/grafana/dashboards
    networks:
      - mon

  cm-icinga2-master:
    restart: always
    build: ../../docker-cm-icinga2
    container_name: cm-icinga2-master
    hostname: cm-icinga2-master
    depends_on:
      - data
      - database
      - redis
    links:
      - database
      - redis
    environment:
      SERVICE_NAME: icinga2-master
      MYSQL_HOST: database
      MYSQL_ROOT_PASS: database.pass
      IDO_PASSWORD: ido.pass
      IDO_DATABASE_NAME: icinga2core
      CARBON_HOST: carbon
      ICINGA_CLUSTER: 'false'
      ICINGA_MASTER: cm-icinga2-master
      ICINGA_API_USERS: root:icinga,icingaweb:icingaweb,dashing:dashing,cert:foo-bar
      REDIS_HOST: redis
    ports:
      - 5665:5665
      - 6666:6666
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /share/etc/cm-icinga2.yaml:/etc/cm-icinga2.yaml
      - /share/etc/icinga2/objects.d:/etc/icinga2/objects.d
      - /share/usr/local/share/icinga2:/usr/local/share/icinga2
      - /share/etc/icinga2/conf.d/coremedia_notifications.conf:/etc/icinga2/conf.d/coremedia_notifications.conf
      - /share/etc/icinga2/scripts/aws-notifications.rb:/etc/icinga2/scripts/aws-notifications.rb
      - /share/etc/icinga2/scripts/notification.erb:/etc/icinga2/scripts/notification.erb
      - /share/usr/lib/monitoring-plugins/icingachecks.rb:/usr/local/lib/icingachecks.rb
      - /share/usr/lib/monitoring-plugins/check_cm_feeder_status.rb:/usr/lib/monitoring-plugins/check_cm_feeder_status
      - /share/usr/lib/monitoring-plugins/check_cm_cache.rb:/usr/lib/monitoring-plugins/check_cm_cache
      - /share/usr/lib/monitoring-plugins/check_cm_memory.rb:/usr/lib/monitoring-plugins/check_cm_memory
      - /share/usr/lib/monitoring-plugins/check_cm_license.rb:/usr/lib/monitoring-plugins/check_cm_license
      - /share/usr/lib/monitoring-plugins/check_cm_capconnection.rb:/usr/lib/monitoring-plugins/check_cm_capconnection
      - /share/usr/lib/monitoring-plugins/check_cm_runlevel.rb:/usr/lib/monitoring-plugins/check_cm_runlevel
      - /share/usr/lib/monitoring-plugins/check_cm_sequencenumbers.rb:/usr/lib/monitoring-plugins/check_cm_seqencenumbers
      - /share/usr/lib/monitoring-plugins/check_ssl_cert:/usr/lib/monitoring-plugins/check_ssl_cert
      - icinga:/srv
      - icinga:/var/lib/icinga2
    networks:
      - mon
    extra_hosts:
      osmc.local: 192.168.122.60

  icingaweb2:
    restart: always
    image: bodsch/docker-icingaweb2:2.4.2
    container_name: icingaweb2
    hostname: icingaweb2
    environment:
      MYSQL_HOST: database
      MYSQL_ROOT_PASS: database.pass
      IDO_PASSWORD: ido.pass
      IDO_DATABASE_NAME: icinga2core
      ICINGA2_HOST: cm-icinga2-master
      ICINGA2_CMD_API_USER: icingaweb
      ICINGA2_CMD_API_PASS: icingaweb
      ICINGAWEB2_USERS: coremedia:coremedia,icinga:icinga
      LDAP: '{
        "active_directory": "true",
        "server": "${LDAP_SERVER}",
        "port": "${LDAP_PORT}",
        "bind_dn": "${LDAP_BIND_DN}",
        "bind_password": "${LDAP_BIND_PASSWORD}",
        "base_dn": "${LDAP_BASE_DN}",
        "filter": "${LDAP_FILTER}",
        "role": {
          "groups": "${LDAP_GROUP_NAMES}",
          "permissions": "${GROUP_PERMISSIONS}"
        }'
    depends_on:
      - data
      - database
      - cm-icinga2-master
    links:
      - database
      - cm-icinga2-master:icinga2
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mon

  markdown-service:
    restart: always
    image: bodsch/docker-markdown-service:1.0.0
    container_name: markdown-service
    hostname: markdown-service
    depends_on:
      - data
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /share/www/markdown-service:/var/www
    networks:
      - mon

  cm-dashing:
    restart: always
    build: ../../docker-cm-dashing
    container_name: cm-dashing
    hostname: cm-dashing
    environment:
      ICINGA_HOST: cm-icinga2-master
      ICINGA_API_USER: dashing
      ICINGA_API_PASSWORD: dashing
      ICINGAWEB_URL: /icinga
      PROXY_PATH: /dashing
      ICINGA_CERT_SERVICE: '{
        "ba": { "user":"admin", "password":"admin" },
        "api": { "user":"root", "password":"icinga" },
        "server": "cm-icinga2-master",
        "port": 4567,
        "path": "/"
      }'
    depends_on:
      - cm-icinga2-master
    volumes:
      - /etc/localtime:/etc/localtime:ro
    networks:
      - mon


  # CoreMedia Glue and Logic
  #
  cm-rest-service:
    restart: always
    build: ../../docker-cm-rest-service
    container_name: cm-rest-service
    hostname: cm-rest-service
    environment:
      TZ: 'Europe/Berlin'
      MYSQL_HOST: database
      MYSQL_ROOT_PASS: database.pass
    depends_on:
      - data
      - redis
      - database
    links:
      - redis
      - database
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
    networks:
      - mon
    extra_hosts:
      osmc.local: 192.168.122.60

  # single service
  # use MQ to process data
  cm-service-discovery:
    restart: always
    build: ../../docker-cm-service-discovery
    container_name: cm-service-discover
    hostname: cm-service-discover
    environment:
      TZ: 'Europe/Berlin'
      REFRESH_ENABLED: 'true'
      INTERVAL: 20
    depends_on:
      - data
      - jolokia
      - beanstalkd
      - redis
      - database
    links:
      - jolokia
      - beanstalkd
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
      - /share/etc/cm-service.yaml:/etc/cm-service.yaml
      - /share/etc/cm-application.yaml:/etc/cm-application.yaml
    networks:
      - mon
    extra_hosts:
      osmc.local: 192.168.122.60

  # single service
  # use MQ to process data
  cm-data-collector:
    restart: always
    build: ../../docker-cm-data-collector
    container_name: cm-data-collector
    hostname: cm-data-collector
    environment:
      TZ: 'Europe/Berlin'
      INTERVAL: 45
    depends_on:
      - data
      - jolokia
      - beanstalkd
      - redis
      - database
    links:
      - jolokia
      - beanstalkd
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
      - /share/etc/cm-service.yaml:/etc/cm-service.yaml
      - /share/etc/cm-application.yaml:/etc/cm-application.yaml
    networks:
      - mon
    extra_hosts:
      osmc.local: 192.168.122.60

  # single service
  # use MQ to process data
  cm-carbon-client:
    restart: always
    build: ../../docker-cm-carbon-client
    container_name: cm-carbon-client
    hostname: cm-carbon-client
    environment:
      TZ: 'Europe/Berlin'
      # USE ONLY WITH AND EXTERNAL CARBON-WRITER!
      GRAPHITE_HOST: carbon
    depends_on:
      - data
      - redis
    links:
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
    networks:
      - mon

  # single service
  # use MQ to process data
  cm-grafana-client:
    restart: always
    build: ../../docker-cm-grafana-client
    container_name: cm-grafana-client
    hostname: cm-grafana-client
    environment:
      TZ: 'Europe/Berlin'
      GRAFANA_HOST: nginx
      SERVER_CONFIG_FILE: /etc/grafana_config.yml
      RUN_DELAY: 30
    depends_on:
      - data
      - beanstalkd
      - redis
      - database
    links:
      - nginx
      - beanstalkd
      - redis
      - database
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
      - /share/usr/local/share/templates:/usr/local/share/templates
      - /share/etc/grafana/grafana_config.yml:/etc/grafana_config.yml
    networks:
      - mon

  # single service
  # use MQ to process data
  cm-graphite-client:
    restart: always
    build: ../../docker-cm-graphite-client
    container_name: cm-graphite-client
    hostname: cm-graphite-client
    environment:
      TZ: 'Europe/Berlin'
      GRAPHITE_HOST: nginx
      GRAPHITE_HTTP_PORT: 80
      GRAPHITE_PATH: /graphite
    depends_on:
      - data
      - beanstalkd
    links:
      - beanstalkd
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
    networks:
      - mon

  # single service
  # use MQ to process data
  cm-icinga-client:
    restart: always
    build: ../../docker-cm-icinga-client
    container_name: cm-icinga-client
    hostname: cm-icinga-client
    environment:
      TZ: 'Europe/Berlin'
      ICINGA_CERT_SERVICE: '{
        "ba": { "user":"admin", "password":"admin" },
        "api": { "user":"root", "password":"icinga" },
        "server": "cm-icinga2-master",
        "port": 4567,
        "path": "/"
      }'
      ICINGA_HOST: cm-icinga2-master
      ICINGA_API_USER: root
      ICINGA_API_PASSWORD: icinga
      ENABLE_NOTIFICATIONS: 'true'
      RUN_DELAY: 30
    depends_on:
      - data
      - beanstalkd
    links:
      - beanstalkd
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./logs:/var/log
      - /share/etc/icinga_server_config.yml:/etc/icinga_server_config.yml
    networks:
      - mon

