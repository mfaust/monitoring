#!/bin/bash
#
# Pr√ºft
#   LatestIncomingSequenceNumber
#   LatestCompletedSequenceNumber
# gg. einen festgelegten RLS
#

# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="1.0.1"
VDATE="05.08.2015"

# ----------------------------------------------------------------------------------------

NRPE_DEFAULTS="/usr/local/share/nrpe_defaults.sh"
SERVICES="/usr/local/etc/services"

[ -f "${NRPE_DEFAULTS}" ] && {
  . ${NRPE_DEFAULTS}
} || {
  echo "nrpe defaults missing"
  exit 1
}

[ -f "${SERVICES}" ] && {
  . ${SERVICES}
} || {
  echo "services missing"
  exit 1
}

JQ=$(which jq)

if [ -z ${JQ} ]
then
  echo "UNKNOWN - We need 'jq'! please run puppet agent again"

  exit ${STATE_UNKNOW}
fi

# ----------------------------------------------------------------------------------------

HOSTNAME="$(hostname -s)"

BASE_RLS=
BASE_IncomingSequenceNumber=
BASE_CompletedSequenceNumber=

RLS_PORT="48099"
RLS_RESULT="CMRLSReplicator.result"

WARN=200
CRIT=1000

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "NRPE-Check to Check RLS Sequence Numbers"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" \
          "$SCRIPTNAME [-h] [-v] [-f] [-w] [-c critical]"

  printf  "$help_format_desc" "" \
          "-h" ": Show this help"

  printf  "$help_format_desc" "" \
          "-v" ": Prints out the Version"
}

# ----------------------------------------------------------------------------------------

status() {

  local port="${1}"
  local status=
  local result=

  DOMAIN="$(facter domain)"

  if [[ ${HOSTNAME} =~ .*prod.* ]]
  then
    # LIVE
    ENV="prod"
    BASE_RLS="cmstr-prod-rls-01.svc.guj.de"
  else
    ENV="stage"
    BASE_RLS="cmstr-stage-rls-01.svc.guj.de"
  fi

  filename="${TMP_DIR}/${RLS_PORT}/${RLS_RESULT}"

  BASE_IncomingSequenceNumber="$(curl --silent http://${BASE_RLS}:8000/${RLS_PORT}/${RLS_RESULT}  | ${JQ} '.value.LatestIncomingSequenceNumber')"
  BASE_CompletedSequenceNumber="$(curl --silent http://${BASE_RLS}:8000/${RLS_PORT}/${RLS_RESULT} | ${JQ} '.value.LatestCompletedSequenceNumber')"
  local_IncomingSequenceNumber="$(${JQ} '.value.LatestIncomingSequenceNumber' ${filename})"
  local_CompletedSequenceNumber="$(${JQ} '.value.LatestCompletedSequenceNumber' ${filename})"

  [ "${BASE_IncomingSequenceNumber}" = "null" ]   && BASE_IncomingSequenceNumber=
  [ "${BASE_CompletedSequenceNumber}" = "null" ]  && BASE_CompletedSequenceNumber=
  [ "${local_IncomingSequenceNumber}" = "null" ]  && local_IncomingSequenceNumber=
  [ "${local_CompletedSequenceNumber}" = "null" ] && local_CompletedSequenceNumber=

  if ( [ ! -z ${BASE_IncomingSequenceNumber} ] || [ ! -z ${local_IncomingSequenceNumber} ] )
  then
    if [ -z ${BASE_IncomingSequenceNumber} ]
    then
      # referenz unbekannt
      msg="unknow reference"
      result=${STATE_WARNING}
    elif [ -z ${local_IncomingSequenceNumber} ]
    then
      msg="${msg}, unknow local value"
      result=${STATE_WARNING}
    else
      diff="$(echo ${local_IncomingSequenceNumber} - ${BASE_IncomingSequenceNumber} | bc)"

      state_msg="Incoming Sequence Number differ (${diff})"

      if ( [ ${diff} -gt ${CRIT} ] )
      then
        echo "CRITICAL - ${state_msg}"
        result=${STATE_CRITICAL}
      elif ( [ ${diff} -gt ${WARN} ] || [ ${diff} -eq ${WARN} ] )
      then
        echo "WARNING - ${state_msg}"
        result=${STATE_WARNING}
      else
        echo "OK - ${state_msg}"
        result=${STATE_OK}
      fi
    fi
  else

    echo "UNKNOWN - no values for Incoming Sequence Number"
    result=${STATE_WARNING}
  fi

  exit ${result}
}


run() {

  if [[ ${HOSTNAME} =~ .*rls.* ]] # dmz-cm-cms-prod-01-vi
  then
    # der check ist nur auf RLSen sinnvoll
    status
  else
    echo "UNKNOWN - here is no RLS available"
    result=${STATE_UNKNOWN}
  fi

  exit ${result}
}

# ----------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------

run

# EOF
