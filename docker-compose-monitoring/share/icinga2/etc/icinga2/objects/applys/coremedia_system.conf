
/**
  *    Zombie Procs
  */
apply Service "nrpe-zombie-procs" to Host {
  import "generic-service"
  display_name = "NRPE - zombie procs"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_zombie_procs"
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *    current load
  */
apply Service "nrpe-current-load" to Host {
  import "generic-service"
  display_name = "NRPE - current load"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_load"
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *    available disk space
  */
apply Service "nrpe-disk" to Host {
  import "generic-service"
  display_name = "NRPE - Disk Space /"
  assign where host.vars.nrpe == true
  check_command = "nrpe"
  vars += {
    "nrpe_command" = "check_disk"
    "nrpe_arguments" = [
      "10%",
      "5%",
      "/",
    ]
  }
  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *  Check IOR on Applications
  */
apply Service "IOR-" for ( app => config in host.vars.cm ) {

  import "generic-service"
  vars += config
  display_name = "Coremedia - IOR " + app
  check_command = "http"
  assign where config.ior == true

  vars = {
    "http_port" = config.port_http
    "http_uri" = "/coremedia/ior"
    "http_string" = "IOR:"
  }

  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *
  */
apply Service "CAEFeeder-" for ( app => config in host.vars.cm ) {

  import "generic-service"
  vars += config
  display_name = "Coremedia - CAEFeeder " + config.feeder
  check_command = "coremedia_feeder"

  assign where app == "caefeeder-live" || app == "caefeeder-preview"

  vars = {
    "host"   = host.address
    "feeder" = config.feeder
  }

  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *
  */
apply Service "ContentFeeder-" for ( app => config in host.vars.cm ) {

  import "generic-service"

  vars += config

  display_name = "Coremedia - Content Feeder"
  check_command = "coremedia_feeder"

  assign where app == "content-feeder"

  vars = {
    "host"   = host.address
    "feeder" = config.feeder
  }

  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *
  */
apply Service "UAPICache-" for ( app => config in host.vars.cm ) {

  import "generic-service"

  vars += config

  display_name = "Coremedia - UAPI Cache " + app
  check_command = "coremedia_cache"

  assign where config.uapi_cache == true

  vars = {
    "host"   = host.address
    "application" = app
    "cache" = "uapi-cache"
  }

  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *
  */
apply Service "BlobCache-" for ( app => config in host.vars.cm ) {

  import "generic-service"

  vars += config

  display_name = "Coremedia - Blob Cache " + app
  check_command = "coremedia_cache"

  assign where config.blob_cache == true

  vars = {
    "host"   = host.address
    "application" = app
    "cache" = "blob-cache"
  }

  max_check_attempts = 5
  check_interval = 2m
  retry_interval = 30s
  enable_notifications = false
}

/**
  *
  */
apply Service "License-" for ( app => config in host.vars.cm ) {

  import "generic-service"

  vars += config

  display_name = "Coremedia - License " + app
  check_command = "coremedia_license"

  assign where config.license == true

  vars = {
    "host"   = host.address
    "application" = app
  }

  max_check_attempts = 1
  check_interval = 12h
  enable_notifications = false
}

