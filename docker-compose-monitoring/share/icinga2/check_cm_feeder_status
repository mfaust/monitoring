#!/bin/bash
#
# maintainer         Coremedia
# maintainer_email   bodo.schulz@coremedia.com
# license            Copyright (C) 2016, CoreMedia AG proprietary License, all rights reserved.
# description        icinga Check for Feeder Status
# version            2.0.2
# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="2.0.2"
VDATE="25.05.2016"

# ----------------------------------------------------------------------------------------

defaults="/usr/lib/monitoring-plugins/utils.sh"

[ -f ${defaults} ] && {
  . ${defaults}
} || {
  STATE_OK=0
  STATE_WARNING=1
  STATE_CRITICAL=2
  STATE_UNKNOWN=3
  STATE_DEPENDENT=4
}

PLUGIN_BASE="/usr/lib/monitoring-plugins"
CACHE_BASE="/var/cache/monitoring"

[ -f /etc/env.vars ] && . /etc/env.vars

JQ=$(which jq)

# ----------------------------------------------------------------------------------------

HOSTNAME="$(hostname -s)"

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "NRPE-Check to Check Coremedia Feeder Status"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" \
          "$SCRIPTNAME [-h|--help] [-v|--version] [-H|--host $Hostname] [-f|--feeder $Feeder]"

  printf  "$help_format_desc"    ""  "-h | --help"     ": Show this help"
  printf  "$help_format_desc"    ""  "-v | --version"  ": Prints out the Version"
  printf  "$help_format_desc"    ""  "-H | --host"     ": Host with running Application"
  printf  "$help_format_desc"    ""  "-f | --feeder"   ": The feeder you want to test [content, live, preview]"
}

# ----------------------------------------------------------------------------------------

round() {
  echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*$1)+0.5)/(10^$2)" | bc))
}


feederStatus() {

  local port="${1}"
  local status=

#   DOMAIN="$(facter domain)"
#
#   if [[ ${HOSTNAME} =~ .*prod.* ]]
#   then
#     # LIVE
#     ENV="prod"
#     [ "${DOMAIN}" = "app.webcloud.guj.de" ] && {
#       SRV="cmstr-prod-live-feeder.svc.guj.de"
#     } || {
#       SRV="cmstr-prod-preview-feeder.svc.guj.de"
#     }
#   else
#     ENV="stage"
#     [ "${DOMAIN}" = "app.webstage.guj.de" ] && {
#       SRV="cmstr-stage-live-feeder.svc.guj.de"
#     } || {
#       SRV="cmstr-stage-preview-feeder.svc.guj.de"
#     }
#   fi

  # dns5     - 194.12.216.18  - OBSOLETE
  # dns6     - 194.12.217.18  - OBSOLETE
  # infoblox - 194.12.208.70  - NEW <= antwortet NICHT zuverlässig

#   DNS="127.0.0.1"
#
#   for dns in ${DNS}
#   do
#     result="${result} $(dig -4 -t cname ${SRV} @${dns} | grep -v ';' | grep "IN CNAME" | awk -F' ' '{print $5}' | sed "s|.${DOMAIN}.||g")"
#   done
#
#   if [ $(echo "${result}" | grep -c "${HOSTNAME}") -eq 0 ]
#   then
#     status="SHADOW"
#   else
#     status="ACTIVE"
#   fi

  if [ ${FEEDER} == LIVE ]
  then
    status='LIVE'
  else
    status='PREVIEW'
  fi


  filename="${CACHE_BASE}/${HOST}/${PORT}/CM_CAEFeeder_Health.result"

  if [ -f ${filename} ]
  then
    health="$(cat ${filename} | ${JQ} '.value.Healthy' | sed 's/"//g')"

    WARN=2500
    CRIT=10000

    filename="${CACHE_BASE}/${HOST}/${PORT}/CM_CAEFeeder_ProactiveEngine.result"

    KeysCount="$(${JQ} '.value.KeysCount' ${filename})"
    ValuesCount="$(${JQ} '.value.ValuesCount' ${filename})"
    QueueProcessedPerSecond="$(${JQ} '.value.QueueProcessedPerSecond' ${filename})"
    SendSuccessTimeLatest="$(${JQ} '.value.SendSuccessTimeLatest' ${filename} | sed 's/"//g')"

    [ "${KeysCount}" = "null" ]               && KeysCount=0
    [ "${ValuesCount}" = "null" ]             && ValuesCount=0
    [ "${QueueProcessedPerSecond}" = "null" ] && QueueProcessedPerSecond=0
    [ "${SendSuccessTimeLatest}" = "null" ]   && SendSuccessTimeLatest=

    QueueProcessedPerSecond="$(round ${QueueProcessedPerSecond} 1)"

    CountDiff=

    if [ ! -z "${SendSuccessTimeLatest}" ]
    then
      DATE1="$(echo "${SendSuccessTimeLatest}" |sed -e 's|T| |g' -e 's|+02:00||g' -e 's|Z||g')"
      DATE2="$(date "+%Y-%m-%d %H:%M:%S")"
      SEC1=$(date -d "${DATE1}" +%s)
      SEC2=$(date -d "${DATE2}" +%s)
      diffSec=$((SEC2-SEC1))
      minuteDiff=$((diffSec/60*1))
    else
      DATE1=
      DATE2=
      SEC1=
      SEC2=
      diffSec=
      minuteDiff=0
    fi

    if ( [ ${ValuesCount} -eq 0 ] && [ ${KeysCount} -eq 0 ] )
    then
      state_msg="no Feederdata. maybe restarting?"
    else

      CountDiff=$(echo "${KeysCount}-${ValuesCount}" | bc)

#      state_msg="${ValuesCount} Elements feeded. Must be ${KeysCount}.${CountDiff} left"
      if [ ${ValuesCount} -eq ${KeysCount} ]
      then
        state_msg="all ${KeysCount} Elements feeded"
      else
        state_msg="${ValuesCount} Elements of ${KeysCount} feeded. (${CountDiff} left)"
      fi

#       if [ ${minuteDiff} -gt 0 ]
#       then
#         state_msg="${state_msg} / last run ${minuteDiff} min ago"
#       fi

#       if [ ${CountDiff} -gt 0 ]
#       then
#         state_msg="${state_msg} , ${QueueProcessedPerSecond} per sec.  "
#       fi
    fi

    if [ "${health}" = "false" ]
    then
      echo "CRITICAL - ${status} - NOT HEALTHY - ${state_msg}"
      result=${STATE_CRITICAL}
    else
      health_msg="HEALTHY"

      if [ -z ${CountDiff} ]
      then
        echo "UNKNOWN - ${status} - ${health_msg} - ${state_msg}"
        result=${STATE_UNKNOWN}
      elif ( [ ${CountDiff} -gt ${CRIT} ] )
      then
        echo "CRITICAL - ${status} - ${health_msg} - ${state_msg}"
        result=${STATE_CRITICAL}
      elif ( [ ${CountDiff} -gt ${WARN} ] || [ ${CountDiff} -eq ${WARN} ] )
      then
        echo "WARNING - ${status} - ${health_msg} - ${state_msg}"
        result=${STATE_WARNING}
      else

          echo "OK - ${status} - ${health_msg} - ${state_msg}"
          result=${STATE_OK}

#         if ( [ ${minuteDiff} -gt 60 ] && [ ${minuteDiff} -lt 90 ] )
#         then
#           # Der letzte valide Lauf liegt mehr als 10 Minuten zurück
#           echo "WARNING - ${status} - ${health_msg} - ${state_msg}"
#           result=${STATE_WARNING}
#         elif [ ${minuteDiff} -gt 90 ]
#         then
#           echo "CRITICAL - ${status} - ${health_msg} - ${state_msg}"
#           result=${STATE_CRITICAL}
#         else
#           echo "OK - ${status} - ${health_msg} - ${state_msg}"
#           result=${STATE_OK}
#         fi

      fi
    fi
  else
    echo "UNKNOWN - No Result-File available"
    result=${STATE_UNKNOWN}
  fi

  exit ${result}
}

check_contentFeeder() {

  local port="${1}"
  local status=

  local filename="${CACHE_BASE}/${HOST}/${PORT}/CM_ContentFeeder.result"
  local WARN=2500
  local CRIT=10000

  if [ -f ${filename} ]
  then
    state="$(${JQ} '.value.State' ${filename} | sed 's/"//g')"
    pending_events="$(${JQ} '.value.PendingEvents' ${filename} | sed 's/"//g')"
    pending_documents="$(${JQ} '.value.CurrentPendingDocuments' ${filename} | sed 's/"//g')"

    if [ "${state}" = "running" ]
    then
      if ( [ ${pending_documents} -eq 0 ] && [ ${pending_documents} -lt ${WARN} ] )
      then
        status="OK"
        result=${STATE_OK}
      elif ( [ ${pending_documents} -gt ${WARN} ] && [ ${pending_documents} -lt ${CRIT} ] )
      then
        status="WARNING"
        result=${STATE_WARNING}
      else
        status="CRITICAL"
        result=${STATE_CRITICAL}
      fi

    elif [ "${state}" = "initializing" ]
    then
      status="WARNING"
    fi

    echo "${status} - Pending Documents: ${pending_documents} , Pending Events: ${pending_events}"

  else
    echo "UNKNOWN - No Result-File available"
    result=${STATE_UNKNOWN}
  fi

  exit ${result}
}

run() {

  # feeder_content feeder_live feeder_prev
  case ${FEEDER} in
    CONTENT)
      PORT=$(grep '='  ${SERVICES} | grep -v standardJMX | grep -i feeder_content | cut -d '=' -f 2)
      check_contentFeeder ${PORT}
      ;;
    LIVE)
      PORT=$(grep '='  ${SERVICES} | grep -v standardJMX | grep -i feeder_live | cut -d '=' -f 2)
      feederStatus ${PORT}
      ;;
    PREV)
      PORT=$(grep '='  ${SERVICES} | grep -v standardJMX | grep -i feeder_prev | cut -d '=' -f 2)
      feederStatus ${PORT}
      ;;
    *)
      echo "UNKNOWN - here is no Feeder available"
      result=${STATE_UNKNOWN}
      ;;
  esac

  exit ${result}
}

# ----------------------------------------------------------------------------------------

# Parse parameters
while [ $# -gt 0 ]
do
  case "${1}" in
    -h|--help) shift
      usage;
      exit 0
      ;;
    -v|--version) shift
      version;
      exit 0
      ;;
    -H|--host)
      shift
      HOST="${1}"
      SERVICES="${CACHE_BASE}/${HOST}/cm-services"
      ;;
    -f|--feeder)
      shift
      case "${1}" in
        content)  FEEDER=CONTENT  ;;
        live)     FEEDER=LIVE     ;;
        preview)  FEEDER=PREV     ;;
        *)        echo "UNKNOWN - unknow Feeder type"; FEEDER= ;;
      esac
    ;;
    *)
      echo "Unknown argument: '${1}'"
      exit $STATE_UNKNOWN
      ;;
  esac
shift
done

#----------------------------------------------------------------------------------------

[ -z "${HOST}" ] && {
  echo "Usage error: parameter --host missing"
  usage
  exit ${STATE_UNKNOWN}
}

[ -z "${FEEDER}" ] && {
  echo "Usage error: parameter --feeder needs an argument ('content' or 'live' or 'preview')"
  usage
  exit ${STATE_UNKNOWN}
}

[ -f "${SERVICES}" ] || {
  echo "UNKNOWN - cm-services missing"
  exit ${STATE_UNKNOWN}
}

run

# EOF
