#!/bin/bash
#
# G+J VGWort Application
#
#
#
#

# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="1.6.4"
VDATE="24.06.2015"

# ----------------------------------------------------------------------------------------

NRPE_DEFAULTS="/usr/local/share/nrpe_defaults.sh"
SERVICES="/usr/local/etc/services"

[ -f "${NRPE_DEFAULTS}" ] && {
  . ${NRPE_DEFAULTS}
} || {
  echo "nrpe defaults missing"
  exit 1
}

[ -f "${SERVICES}" ] && {
  . ${SERVICES}
} || {
  echo "services missing"
  exit 1
}

HOST=
STRING=
SSL=
URL="/"
GZIP=

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "HTTP Check"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" \
          "$SCRIPTNAME [-h] [-v] [-H Host] [-P Port] [-s] [-S] [-u] [-g]"

  printf  "$help_format_desc" "" \
          "-h" ": Show this help"

  printf  "$help_format_desc" "" \
          "-v" ": Prints out the Version"

  printf  "$help_format_desc" "" \
          "-H" ": Host name argument for servers using host headers"

  printf  "$help_format_desc" "" \
          "-s" ": String to expect in the content"

  printf  "$help_format_desc" "" \
          "-S" ": Connect via SSL (default false)"

  printf  "$help_format_desc" "" \
          "-u" ": URL to GET (default: /)"

  printf  "$help_format_desc" "" \
          "-g" ": check gziped Content (default false)"
}

# ----------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------

run() {

  local curl_opts=


  tmpfile="${SCRIPTNAME}--${HOST}--${URL}--$(echo "${STRING}" | tr [a-z] [A-Z] | sed 's| ||g')"
  tmpfile="$(echo ${tmpfile} | tr -d '\/')"

  tmpdir="$(mktemp --directory --tmpdir=${TMP_DIR})"

  filename=${tmpdir}/${tmpfile}.tmp
  headerfile=${tmpdir}/${tmpfile}.header
  resultcodes=${headerfile}.resultcodes

  curl_opts="--connect-timeout 10 --max-time 20 --verbose --location --insecure --cookie test --dump-header ${headerfile} --output ${filename}"

  [ ${SSL} = true ] && {
    host="https://${HOST}"
  } || {
    host="http://${HOST}"
  }

  host=${host}${URL}

  curl ${curl_opts} ${host}  2> /dev/null

  result=$?

  if [ -f ${headerfile} ]
  then

    grep "HTTP/1.1" ${headerfile} > ${resultcodes}

    if [ $(cat ${resultcodes} | wc -l) -gt 0 ]
    then
      if [ $(grep "200 OK" ${resultcodes} | wc -l) -eq 1 ]
      then
        #
        if [ ! -z ${STRING} ]
        then

          if ( [ ${GZIP} = true ] && [ $(grep "Content-Encoding: gzip" ${headerfile} | wc -l) -eq 1 ] )
          then
            mv ${filename} ${tmpdir}/${tmpfile}.gz
            zcat ${tmpdir}/${tmpfile}.gz > ${filename}
          fi

          if [ $(grep "${STRING}" ${filename} | wc -l) -eq 1 ]
          then
            echo "OK - String '${STRING}' found on '${host}'"
            result=${STATE_OK}
          else
            echo "CRITICAL - String '${STRING}' NOT found on '${host}'"
            result=${STATE_CRITICAL}
          fi
        fi
      else
        result="$(head -n1 ${resultcodes})"

        echo "WARNING - Wrong result Code: ${result}"
        result=${STATE_WARNING}
      fi
    else
      echo "CRITICAL - no valid HTTP Result."
      result=${STATE_CRITICAL}
    fi
  else
    echo "UNKNOWN - unknown State (resultcode: ${result})"
    result=${STATE_UNKNOWN}
  fi

  [ -d ${tmpdir} ] && rm -rf ${tmpdir}

  exit ${result}
}

# ----------------------------------------------------------------------------------------

# Parse parameters
while [ $# -gt 0 ]
do
  case "${1}" in
    -h|--help) shift
      usage;
      exit 0
      ;;
    -v|--version) shift
      version;
      exit 0
      ;;
    -H|--host) shift
      HOST="${1}"       ;;
    -s|--string) shift
      STRING="${1}"     ;;
    -S|--ssl)
      SSL=true          ;;
    -u|--url) shift
      URL="${1}"        ;;
    -g|--gzip)
      GZIP=true         ;;
    *)
      echo "Unknown argument: '${1}'"
      exit $STATE_UNKNOWN
      ;;
  esac
shift
done


# Check that required argument (metric) was specified
[ -z "${HOST}" ] && {
  echo "Usage error: 'host' parameter missing"
  exit ${STATE_UNKNOWN}
}

[ -z "${SSL}" ] && {
  SSL=false
} || {
  SSL=true
}

[ -z "${GZIP}" ] && {
  GZIP=false
} || {
  GZIP=true
}

#----------------------------------------------------------------------------------------

run

# EOF
