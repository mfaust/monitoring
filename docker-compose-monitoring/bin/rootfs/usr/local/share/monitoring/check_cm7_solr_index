#!/bin/bash
#
# Pr√ºft
#   .details.generation
# gg. den Solr Master
#

# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="1.0.2"
VDATE="29.09.2015"

# ----------------------------------------------------------------------------------------

NRPE_DEFAULTS="/usr/local/share/nrpe_defaults.sh"
SERVICES="/usr/local/etc/services"

[ -f "${NRPE_DEFAULTS}" ] && {
  . ${NRPE_DEFAULTS}
} || {
  echo "nrpe defaults missing"
  exit 1
}

[ -f "${SERVICES}" ] && {
  . ${SERVICES}
} || {
  echo "services missing"
  exit 1
}

JQ=$(which jq)

if [ -z ${JQ} ]
then
  echo "UNKNOWN - We need 'jq'! please run puppet agent again"

  exit ${STATE_UNKNOW}
fi

# ----------------------------------------------------------------------------------------

HOSTNAME="$(hostname -s)"

WARN=200
CRIT=1000

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="%-9s %s\n"

  echo ""
  printf  "$help_format_title" "NRPE-Check to Check Solr Generation Versions"
  echo ""
  printf  "$help_format_title" " Version $VERSION ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="%-9s %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "$help_format_title" "Usage:" "$SCRIPTNAME [-h] [-v] [-f] [-w] [-c critical]"
  printf  "$help_format_desc"  ""   "-h" ": Show this help"
  printf  "$help_format_desc"  ""   "-v" ": Prints out the Version"
}

# ----------------------------------------------------------------------------------------
prepare() {

  CURL=$(which curl)

  [ -z ${CURL} ] && {
    echo "curl not found"
    exit ${STATE_CRITICAL}
  }

  SOLR_MASTER_PORT="44099"
  SOLR_SLAVE_PORT="45099"

  DOMAIN="$(facter domain)"

  if [[ ${HOSTNAME} =~ .*prod.* ]]
  then
    # LIVE
    ENV="prod"
  else
    ENV="stage"
  fi

  if [[ ${HOSTNAME} =~ ^web.* ]]
  then
    # LIVE
    CORE="live"
  elif [[ ${HOSTNAME} =~ ^dmz.* ]]
  then
    CORE="preview"
  fi

  SOLR_MASTER="cmstr-${ENV}-${CORE}-feeder.svc.guj.de"
  RESULT_FILE="solr.${CORE}.result"

}

status() {

  prepare

  slaveGeneration=
  masterGeneration=

  masterGeneration="$(curl --silent http://${SOLR_MASTER}:8000/${SOLR_MASTER_PORT}/${RESULT_FILE} | jq '.details.generation')"
  slaveGeneration="$(jq '.details.generation' ${TMP_DIR}/${SOLR_SLAVE_PORT}/${RESULT_FILE})"

  [ "${masterGeneration}" = "null" ]  && masterGeneration=
  [ "${slaveGeneration}" = "null" ]   && slaveGeneration=

  if ( [ ! -z ${masterGeneration} ] || [ ! -z ${slaveGeneration} ] )
  then
    if [ -z ${masterGeneration} ]
    then
      # referenz unbekannt
      msg="unknow reference"
      result=${STATE_WARNING}
    elif [ -z ${slaveGeneration} ]
    then
      msg="${msg}, unknow local value"
      result=${STATE_WARNING}
    else
      diff="$(echo ${slaveGeneration} - ${masterGeneration} | bc)"

      state_msg="Solr Generation differ ${diff} | diff=${diff}"

      if ( [ ${diff} -gt ${CRIT} ] )
      then
        echo "CRITICAL - ${state_msg}"
        result=${STATE_CRITICAL}
      elif ( [ ${diff} -gt ${WARN} ] || [ ${diff} -eq ${WARN} ] )
      then
        echo "WARNING - ${state_msg}"
        result=${STATE_WARNING}
      else
        echo "OK - ${state_msg}"
        result=${STATE_OK}
      fi
    fi
  else

    echo "UNKNOWN - no values for Solr Generations"
    result=${STATE_WARNING}
  fi

  exit ${result}
}


run() {

  if ( [[ ${HOSTNAME} =~ .*rls.* ]] || [[ ${HOSTNAME} =~ .*feeder.* ]] )
  then
    # der check ist nur auf RLSen / Feedern sinnvoll
    status
  else
    echo "UNKNOWN - here is no Solr available"
    result=${STATE_UNKNOWN}
  fi

  exit ${result}
}

# ----------------------------------------------------------------------------------------


#----------------------------------------------------------------------------------------

run

# EOF
