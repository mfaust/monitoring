#!/bin/bash
#
#  prueft die erreichbarkeit des IOR eines Coremedia-Services
#
#

# ----------------------------------------------------------------------------------------

SCRIPTNAME=$(basename $0 .sh)
VERSION="2.0.0"
VDATE="25.05.2016"

# ----------------------------------------------------------------------------------------

defaults="/usr/lib/monitoring-plugins/utils.sh"

if [ -f ${defaults} ]
then
  . ${defaults}
else
  STATE_OK=0
  STATE_WARNING=1
  STATE_CRITICAL=2
  STATE_UNKNOWN=3
  STATE_DEPENDENT=4
fi

PLUGIN_BASE="/usr/lib/monitoring-plugins"

# ----------------------------------------------------------------------------------------

HOST=
PORT=
TIMEOUT=10
CURL=$(which curl)
URL_PREFIX="http://"

# ----------------------------------------------------------------------------------------

version() {

  help_format_title="\n%-9s %s\n"

  printf  "${help_format_title}" "Nagios Plugin to check Coremedia IOR Services on Contentservers (CMs, MLS, RLS)"
  printf  "${help_format_title}" " Version ${VERSION} ($VDATE)"
  echo ""
}

usage() {

  help_format_title="%-9s %s\n"
  help_format_desc="          %-10s %s\n"
  help_format_example="%-9s %-30s %s\n"

  version

  printf  "${help_format_title}" \
          "Usage:" \
          "$SCRIPTNAME [-h] [-v] [-H Host] [-P Port]"

  echo "Parameters description:"

  printf  "${help_format_desc}" \
          "-h|--help" ": Show this help"

  printf  "${help_format_desc}" \
          "-v|--version" ": Prints out the Version"

  printf  "${help_format_desc}" \
          "-H|--host" ": Hostname for IOR Test (FQDN) [localhost,bluebprint-box,mls,cms,rls]"

  printf  "${help_format_desc}" \
          "-P|--port" ": Port for IOR Test [42080]"

}

# ----------------------------------------------------------------------------------------

check_host() {

  local EXITCODE

  nc -z -w 5 ${HOST} ${PORT}

  if [ $? -ne 0 ]
  then
    EXITCODE=1
  else
    EXITCODE=0
  fi

  return ${EXITCODE}
}

run() {

  ${PLUGIN_BASE}/check_http --hostname=${HOST} --port=${PORT} --url=/coremedia/ior --string="IOR:"

  exit $?
}

# ----------------------------------------------------------------------------------------

# Parse parameters
while [ $# -gt 0 ]
do
  case "$1" in
    -h|--help) hift
      usage;
      exit 0
      ;;
    -v|--version) shift
      version;
      exit 0
      ;;
    -H|--host) shift
      HOST="${1}"
      ;;
    -P|--port) shift
      PORT=${1}
      ;;
    *)  echo "Unknown argument: $1"
      exit $STATE_UNKNOWN
      ;;
  esac
shift
done

# Check that required argument (metric) was specified
[ -z "${HOST}" ] && {
  echo "Usage error: 'host' parameter missing"
  exit ${STATE_UNKNOWN}
}

[ -z "${PORT}" ] && {
  echo "Usage error: 'port' parameter missing"
  exit ${STATE_UNKNOWN}
}

check_host > /dev/null || {
  echo "CRITICAL: Host '${HOST}' is not responding."
  exit ${STATE_CRITICAL}
}

#----------------------------------------------------------------------------------------

run

# EOF
